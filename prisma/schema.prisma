// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Message {
  id          String      @id @default(cuid())
  content     String? // For text messages
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  senderId    String
  chatId      String
  messageType MessageType
  url         String? // For links, documents, media files, etc.
  mediaType   MediaType? // For specifying the type of media (e.g., image, audio, video)

  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade, name: "MessageSender")
  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Chat {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  isGroup      Boolean    @default(false)
  messages     Message[]
  participants User[]     @relation("UserChats")
  groupChat    GroupChat?

  @@map("chats")
}

model GroupChat {
  id          String   @id @default(cuid())
  name        String
  description String?
  image       String? // Group profile picture
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  chatId  String @unique
  adminId String // User who is the admin of the group

  chat  Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  admin User @relation(fields: [adminId], references: [id], onDelete: Cascade, name: "GroupAdmin")

  @@map("group_chats")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  accounts   Account[]
  sessions   Session[]
  messages   Message[]   @relation("MessageSender")
  chats      Chat[]      @relation("UserChats")
  groupChats GroupChat[] @relation("GroupAdmin")

  @@map("users")
}

enum MessageType {
  TEXT
  LINK
  DOCUMENT
  IMAGE
  VOICE_NOTE
  AUDIO
  VIDEO
}

enum MediaType {
  IMAGE
  AUDIO
  VIDEO
  DOCUMENT
}
